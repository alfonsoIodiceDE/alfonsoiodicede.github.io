---
title: Spot on Spotify
subtitle: a playlist analysis
author: (my playlist analysis)
footer: Alfonso Iodice D'Enza
title-slide-attributes:
  data-background-position: top  
  data-background-image: /images/spotylogo.png
  data-background-size: contain
  data-background-opacity: "0.25"
format: 
  revealjs:
    theme: default
    fontsize: 1.75em
    preview-links: true
    transition: fade
---

# get access to data

## {auto-animate=true}

you know what Spotify is (right?)


## {auto-animate=true}

- you can access to Spotify data from R

::: {style="color: lightgrey;"}
you know what Spotify is (right?)
:::



## {auto-animate=true}

- you can access to Spotify data from R 

::: {style="color: green; text-align: left;font-size:300%;"}
spotifyr
:::


## {auto-animate=true,.incremental}

- you can access to Spotify data from R 

::: {style="color: green; text-align: left;font-size:100%;"}
spotifyr
:::

a wrapper for the spotify web API

::: {.fragment .highlight-blue}
- client id 
- client secret 
:::

## {.incremental} 

- make sure you have a Spotify account (or create one)

- [Go to Spotify for developers page](https://developer.spotify.com){preview-link="true"}

- [Go to the Dashboard page and log in](https://developer.spotify.com/dashboard/){preview-link="true"}

---

create an app

![](/images/dash_1.png)

---

edit settings

![](/images/dash_2.png)

---

edit the settings

![set redirect URIs to http://localhost:1410/](/images/dash_3.png)

---

copy the client id (already visible)  the client secret    

![](/images/dash_4.png)


# time to run R

---

load the libraries

```{r, echo=TRUE, message=FALSE,warning=FALSE}
#| code-line-numbers: 1-2|3-13
# remotes::install_github("ricardo-bion/ggradar")
# remotes::install_github("lchiffon/wordcloud2")
library(tidyverse)
library(GGally)
library(scales)
library(spotifyr)
library(plotly)
library(ggradar)
library(wordcloud2)
library(lubridate)
library(FactoMineR)
library(kableExtra)
library(gganimate)
```


## {.incremental}

get the token to access spotify from within R

- set your id and secret you copied from the dashboard

```{r, echo=FALSE}
id <- "da84145148934bce881c50ec3915eb82"
secret <- "634a8486839f470d863f018e6db483f5"
```
```{r, eval=FALSE,echo=TRUE}
id <- "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
secret <- "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

- and get the token

```{r, echo=TRUE}
Sys.setenv(SPOTIFY_CLIENT_ID = id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = secret)
access_token <- get_spotify_access_token()
```

---

You can easily access to all of your playlists

```{r, echo=TRUE}
get_my_playlists() %>% select(name,id) %>% slice(1:15) %>% kbl() %>%
  kable_styling(font_size = 16)
```

---

For a given playlist, one has to retrive its id

```{r, echo=TRUE}
commute_id = get_my_playlists() %>% filter(name=="commuter") %>% pull(id)
my_top_id = get_my_playlists() %>% filter(name=="Your Top Songs 2022") %>% pull(id)
lofi_id = get_my_playlists() %>% filter(name=="lofi beats") %>% pull(id)
jtro_id = get_my_playlists() %>% filter(name=="Jazztronica") %>% pull(id)
```

---

That is the information, to access the artists name and id, it takes a little bit more coding

```{r, echo=TRUE}
plst_id = commute_id
plst_tracks = get_playlist_tracks(playlist_id = plst_id) %>% 
  select(track.artists,track.id,track.name,track.popularity,added_at,track.album.release_date)

plst_tracks %>% glimpse()
```

---

Some tracks have more than one artist, to create a single match

(the first artist only is select)

```{r, echo=TRUE}
plst_tracks = plst_tracks %>% 
  mutate(artist.name = map(.x=track.artists,~.x$name[1]),
         artist.id = map(.x=track.artists,~.x$id[1])) %>%
  unnest(c(artist.name,artist.id)) %>% 
  select(-track.artists)

plst_tracks %>% select(artist.name, track.name,added_at)%>% slice(1:5)
```

---

Extract the audio features for each track in the playlist

```{r, echo=TRUE}
plst_tr_id = plst_tracks %>% distinct(track.id) %>% pull(track.id)

audio_features = get_track_audio_features(ids = plst_tr_id)
audio_features %>% slice(1:5)
```

---

match the audio features with the track and artist names

```{r, echo=TRUE}
plst_tracks_feat = plst_tracks %>%
  left_join(audio_features, by=c('track.id' = 'id')) %>% select(-(type:analysis_url),-mode,-key)
```

find the genre associated with each artist in the playlist. (note: 50 artist per request, so some coding is needed)

```{r, echo=TRUE}
#| code-line-numbers: 1-4|5-8
plst_artists = unique(plst_tracks_feat$artist.id)
n_arts =length(plst_artists)
start = seq(from=1, to = n_arts, by=50)
stop = c(start[-1]-1,n_arts)
plst_genre = tibble(start=start,stop=stop) %>% 
  mutate(artists_list=map2(.x=start,.y=stop, ~get_artists(plst_tracks_feat$artist.id[.x:.y])),
         genres = map(.x = artists_list,~.x$genres %>% unlist())
         ) %>% unnest(cols=genres) %>% pull(genres)

```

# visualization



## Wordcloud of genres

```{r, echo=TRUE, fig.align='center'}
plst_genre[str_which(plst_genre,pattern =  "indie$")] = ifelse(
  plst_genre[str_which(plst_genre,pattern =  "indie$")]=="lo-fi indie",
  "lo-fi indie","indie")

plst_genre = plst_genre %>% as.factor()
tibble(word=levels(plst_genre), freq=plst_genre %>% table() ) %>%
  wordcloud2()

```


## spiderplot/radar plot


```{r, echo=TRUE}
plst_tracks_feat %>% 
  mutate(across(.cols = danceability:tempo,.fns = rescale)) %>% 
  summarise(across(.cols = danceability:tempo,.fns = mean)) %>% 
  ggradar(
    grid.label.size = 3, 
    axis.label.size = 4, 
    group.point.size = 3, 
    fill=TRUE
  ) 

```


## parallel coordinates

```{r, echo=TRUE}
v1=which(plst_tracks_feat %>% names =="danceability")

v2=which(plst_tracks_feat %>% names =="tempo")

plst_tracks_feat %>% 
  ggparcoord(columns = v1:v2, 
             scale="std")+
  theme(axis.text.x = element_text(angle=90))
```

## unsupervised learning
```{r, echo=TRUE}
pca_sol = plst_tracks_feat %>% select(v1:v2) %>%
  PCA(graph=FALSE) 
pca_coords = pca_sol %>% .$ind %>% .$coord %>% as_tibble()
pca_trk_imp = pca_sol %>% .$ind %>% .$dist
colnames(pca_coords)=paste0("d_",1:ncol(pca_coords))
kmeans_clu = kmeans(pca_coords,centers = 4,nstart = 50)$cluster %>% as_factor()
```

## put the pca and kmeans results together

```{r, echo=TRUE}
plst_tracks_dr_analysis = cbind(plst_tracks_feat,pca_coords) %>% 
  mutate(cluster=all_of(kmeans_clu),
         importance = all_of(pca_trk_imp),
         top_ten_perc = ifelse(importance>quantile(importance, probs = .9),paste0(track.name,"_",artist.name), ""))
```

## PCA map

```{r, echo=TRUE}
pca_map = plst_tracks_dr_analysis %>% 
  ggplot(mapping = aes(x=d_1,y=d_2,color=cluster)) + 
  geom_point(aes(size=track.popularity,alpha=importance))+
  ggrepel::geom_text_repel(aes(label=top_ten_perc))
```

## PCA map

```{r, echo=TRUE}
pca_map
```


## cluster results via parallel coordinates plot

```{r, echo=TRUE}
v1 = which(plst_tracks_dr_analysis %>% names =="danceability")

v2 = which(plst_tracks_dr_analysis %>% names =="tempo")

v3 = which(plst_tracks_dr_analysis %>% names =="cluster")

v4 = which(plst_tracks_dr_analysis %>% names =="importance")

pca_par_map=plst_tracks_dr_analysis %>% 
  ggparcoord(columns = c(v1:v2), groupColumn=v3,alphaLines = rescale(v4),
             scale="std")+
  theme(axis.text.x = element_text(angle=90)) + theme_minimal()

```

## cluster results via parallel coordinates 

```{r, echo=TRUE}
pca_par_map
```

## Animation by date

pull the month out of

- the date the track is added to the playlist
- the release date of the track

```{r}
plst_tracks_dr_analysis = plst_tracks_dr_analysis %>% mutate(
  trk_date = as_date(added_at) %>% month(label=T)%>% fct_drop(),
  trk_rel_date = as_date(track.album.release_date) %>% month(label=T)%>% fct_drop()) 
```

## Animation by date

:::: {.columns}

::: {.column width="50%"}
```{r, echo=TRUE}
plst_tracks_dr_analysis %>%
 ggplot(aes(x = trk_date))+geom_bar(aes(fill=after_stat(count))) + theme_minimal()+
   transition_states(trk_date)+ shadow_mark()+enter_fade() +enter_grow()
```
:::

::: {.column width="50%"}
```{r, echo=TRUE}
plst_tracks_dr_analysis %>%
 ggplot(aes(x = trk_rel_date))+geom_bar(aes(fill=after_stat(count))) + theme_minimal()+
   transition_states(trk_rel_date)+ shadow_mark()+enter_fade() +enter_grow()

```

:::

::::


# your turn 

---

### create a function that
- takes the  playlist id as input
- returns: 
    - the artist/track/features dataset
    - the genres vector
